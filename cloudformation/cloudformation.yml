
Parameters:

  apiGatewayName:
    Type: String
    Default: my-api
  
  apiGatewayStageName:
    Type: String
    Default: call
  
  apiGatewayHTTPMethodGet:
    Type: String
    Default: GET
  
  lambdaFunctionName:
    Type: String
    Default: my-function
  
  runtime:
    Type: String
    Default: nodejs12.x
    
Resources:
  ApiGatewaySample:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  ApiGatewayMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaFunction.Arn
      ResourceId: !GetAtt ApiGatewaySample.RootResourceId
      RestApiId: !Ref ApiGatewaySample

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodGet
    Properties:
      RestApiId: !Ref ApiGatewaySample
      StageName: !Ref apiGatewayStageName
      StageDescription:
        AccessLogSetting: 
          DestinationArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/${apiGatewayName}:*
          Format: '$context.identity.sourceIp $context.authorizer.claims.sub [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.requestId $context.awsEndpointRequestId $context.xrayTraceId $context.responseLatency $context.integrationLatency "$context.error.message"'

  ApiGatewayAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayPushToCloudWatchRole.Arn"
      
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: lambda-zip-1234
        S3Key: !Sub my-api.zip
        # ZipFile: ../my-api.zip
      Description: Example Lambda function
      FunctionName: !Ref lambdaFunctionName
      Handler: src/handlers/base-route-get.run
      MemorySize: 128
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: !Ref runtime

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewaySample}/${apiGatewayStageName}/${apiGatewayHTTPMethodGet}/

  ApiGatewayPushToCloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*
          PolicyName: lambda

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunctionName}
      RetentionInDays: 90

  TableSample:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TableSample
      AttributeDefinitions:
        - AttributeName: HashId
          AttributeType: S
        - AttributeName: RangeId
          AttributeType: S
        - AttributeName: IndexSample
          AttributeType: S
      KeySchema:
        - AttributeName: HashId
          KeyType: HASH
        - AttributeName: RangeId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: IndexSampleName
          KeySchema:
            - AttributeName: IndexSample
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
